import streamlit as st
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image, UnidentifiedImageError
import numpy as np
import matplotlib.pyplot as plt
import requests
from io import BytesIO
import os
import time

# Configuration de l'application
st.set_page_config(
    page_title="D√©tection de Pneumonie - Version M√©dicale",
    page_icon="ü©∫",
    layout="wide"
)

# Chargement du mod√®le avec v√©rification
@st.cache_resource
def load_model():
    try:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        st.info(f"Chargement du mod√®le sur {device}...")
        
        # Cr√©ation du mod√®le
        model = models.resnet18(weights=None)
        model.fc = nn.Linear(model.fc.in_features, 2)
        
        # V√©rification du fichier mod√®le
        model_path = 'pneumonia_model.pth'
        if not os.path.exists(model_path):
            st.error(f"Fichier mod√®le introuvable: {model_path}")
            st.stop()
            
        # Chargement des poids
        model.load_state_dict(torch.load(model_path, map_location=device))
        model.to(device)
        model.eval()
        
        st.success("Mod√®le charg√© avec succ√®s!")
        return model, device
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le: {str(e)}")
        st.stop()

model, device = load_model()

# Transformation des images (identique √† l'entra√Ænement)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

class_names = ['NORMAL', 'PNEUMONIA']

# Fonction de pr√©diction am√©lior√©e
def predict_image(image):
    try:
        # V√©rification de l'image
        if image is None:
            raise ValueError("Aucune image fournie")
            
        # Conversion en RGB
        if image.mode != 'RGB':
            image = image.convert('RGB')
            
        # Transformation et ajout dimension batch
        image_tensor = transform(image).unsqueeze(0).to(device)
        
        # Pr√©diction avec mesure du temps
        start_time = time.time()
        with torch.no_grad():
            outputs = model(image_tensor)
            probabilities = torch.nn.functional.softmax(outputs[0], dim=0)
            _, predicted = torch.max(outputs, 1)
        inference_time = time.time() - start_time
        
        return {
            'class': class_names[predicted.item()],
            'probability': probabilities[predicted.item()].item(),
            'probabilities': probabilities.tolist(),
            'predicted': predicted.item(),
            'inference_time': inference_time
        }
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction: {str(e)}")
        return None

# Interface Streamlit am√©lior√©e
st.title("ü©∫ D√©tection de Pneumonie par Rayons X")
st.markdown("""
Cette application utilise un mod√®le d'apprentissage profond pour d√©tecter les signes de pneumonie sur des radiographies pulmonaires.
""")

# Section de chargement d'image
st.sidebar.header("Chargement d'image")
uploaded_file = st.sidebar.file_uploader(
    "T√©l√©chargez une radiographie pulmonaire",
    type=["jpg", "jpeg", "png"],
    help="Formats support√©s: JPG, JPEG, PNG"
)

# Exemples d'images de test (chemins locaux ou URLs fiables)
example_images = {
    "Normal (Exemple 1)": "data/test/NORMAL/IM-0027-0001.jpeg",
    "Normal (Exemple 2)": "data/test/NORMAL/NORMAL2-IM-0131-0001.jpeg",
    "Pneumonie (Exemple 1)": "data/test/PNEUMONIA/person101_bacteria_485.jpeg",
    "Pneumonie (Exemple 2)": "data/test/PNEUMONIA/person22_virus_55.jpeg"
}

# S√©lection des exemples
st.sidebar.markdown("### Exemples de radiographies")
example_choice = st.sidebar.selectbox("Choisir un exemple:", ["S√©lectionner..."] + list(example_images.keys()))

# Affichage principal
col1, col2 = st.columns([1, 1])

if uploaded_file is not None or (example_choice and example_choice != "S√©lectionner..."):
    try:
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            image_source = "Fichier upload√©"
        else:
            example_path = example_images[example_choice]
            if example_path.startswith(('http://', 'https://')):
                response = requests.get(example_path)
                response.raise_for_status()
                image = Image.open(BytesIO(response.content))
                image_source = f"Exemple: {example_choice} (URL)"
            else:
                if not os.path.exists(example_path):
                    st.error(f"Fichier exemple introuvable: {example_path}")
                    st.stop()
                image = Image.open(example_path)
                image_source = f"Exemple: {example_choice} (local)"
        
        # Affichage de l'image originale
        with col1:
            st.subheader("Radiographie analys√©e")
            st.image(image, use_container_width=True, caption=image_source)
            
            # Informations sur l'image
            st.markdown(f"""
            **D√©tails techniques:**
            - Format: {image.format if image.format else 'Inconnu'}
            - Dimensions: {image.size[0]}x{image.size[1]} pixels
            - Mode couleur: {image.mode}
            """)
        
        # Pr√©diction
        with st.spinner("Analyse en cours..."):
            result = predict_image(image)
        
        if result:
            with col2:
                st.subheader("R√©sultats de l'analyse")
                
                # Affichage du r√©sultat avec indicateurs visuels
                if result['class'] == 'PNEUMONIA':
                    st.error(f"## ‚ö†Ô∏è D√©tection de pneumonie (confiance: {result['probability']*100:.1f}%)")
                    st.warning("""
                    **Recommandations m√©dicales:**  
                    - Consultez un pneumologue ou un m√©decin g√©n√©raliste rapidement  
                    - Pr√©sentez ces r√©sultats √† votre professionnel de sant√©  
                    - Surveillez les sympt√¥mes (fi√®vre, toux, difficult√©s respiratoires)
                    """)
                else:
                    st.success(f"## ‚úÖ Radiographie normale (confiance: {result['probability']*100:.1f}%)")
                    st.info("""
                    **Informations:**  
                    - Aucun signe √©vident de pneumonie d√©tect√©  
                    - Consultez tout de m√™me un m√©decin si vous pr√©sentez des sympt√¥mes  
                    - Un r√©sultat normal n'exclut pas compl√®tement une pathologie
                    """)
                
                # Graphique des probabilit√©s
                st.subheader("Probabilit√©s de diagnostic")
                fig, ax = plt.subplots(figsize=(8, 3))
                bars = ax.barh(class_names, result['probabilities'], color=['#4CAF50', '#F44336'])
                ax.set_xlim(0, 1)
                ax.set_xlabel('Probabilit√©')
                ax.bar_label(bars, fmt='%.3f', padding=3)
                st.pyplot(fig)
                
                # M√©triques de performance
                st.markdown(f"""
                **D√©tails techniques:**
                - Temps d'inf√©rence: {result['inference_time']:.3f} secondes
                - Mat√©riel utilis√©: {'GPU' if 'cuda' in str(device) else 'CPU'}
                - Classe pr√©dite: {result['predicted']} ({result['class']})
                """)
    
    except UnidentifiedImageError:
        st.error("Erreur: Format d'image non reconnu. Veuillez utiliser une image valide (JPEG, PNG).")
    except requests.exceptions.RequestException as e:
        st.error(f"Erreur de chargement de l'exemple: {str(e)}")
    except Exception as e:
        st.error(f"Erreur inattendue: {str(e)}")

# Section d'information
st.markdown("---")
st.subheader("Informations cliniques")

with st.expander("√Ä propos de ce mod√®le diagnostique"):
    st.markdown("""
    **Caract√©ristiques techniques:**
    - Architecture: ResNet18 (transfer learning)
    - Base d'entra√Ænement: ImageNet + jeu de donn√©es radiologiques
    - Classes: NORMAL (sans pneumonie) vs PNEUMONIA
    - Pr√©cision valid√©e: ~92% sur donn√©es de test
    
    **Limitations importantes:**
    1. Ne remplace pas un diagnostic m√©dical professionnel
    2. Performances variables selon la qualit√© de l'image
    3. D√©tection principalement des pneumonies bact√©riennes et virales typiques
    4. Peut avoir des difficult√©s avec les cas atypiques ou subtils
    """)

with st.expander("Contexte clinique de la pneumonie"):
    st.markdown("""
    **La pneumonie est une infection pulmonaire grave:**
    - Cause principale de mortalit√© infectieuse chez les enfants
    - Sympt√¥mes: fi√®vre, toux, difficult√©s respiratoires
    - Diagnostic radiologique essentiel mais complexe
    
    **Importance du diagnostic pr√©coce:**
    - R√©duction de la mortalit√© gr√¢ce √† un traitement rapide
    - Pr√©vention des complications (abc√®s, septic√©mie)
    - Diff√©renciation entre causes bact√©riennes et virales
    """)

# Footer
st.markdown("---")
st.markdown("""
**Avertissement m√©dical:**  
Cette application fournit une analyse pr√©liminaire automatis√©e √† titre informatif uniquement.  
Elle ne constitue pas un diagnostic m√©dical et ne doit pas remplacer l'√©valuation d'un professionnel de sant√© qualifi√©.  
En cas de sympt√¥mes respiratoires ou de doute, consultez imm√©diatement un m√©decin.
""")

# Journal de d√©bogage (cach√© par d√©faut)
with st.expander("Journal technique (d√©bogage)"):
    st.code(f"""
    Device: {device}
    Mod√®le: ResNet18
    Poids charg√©s: pneumonia_model.pth
    Transformations appliqu√©es: 
        Resize(224x224)
        ToTensor()
        Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    """)